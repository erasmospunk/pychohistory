#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Header #####################################################################
#                                                             PychoHistory   #
#
#   201111 v0.1 first release
#
# Dependencies
# sqlite3, requests, python-dateutil, twython (for twitter)
#
# Imports ###
import os
from optparse import OptionParser
import logging

from modules import BusinessLogic

# Release info ###
__version__ = "0.1"
__author__ = 'Giannis Dzegoutanis'

# Globals ###
DEFAULT_DB_DIRECTORY = os.path.join(os.path.dirname(os.path.abspath(__file__)), "PychoHistoryDatastore")

# Header #####################################################################


# Main #######################################################################
# todo make testable pls
def queries_arg(option, opt_str, value, parser):
  keywords = parser.rargs[0].split(',') if len(parser.rargs) > 0 else None
  setattr(parser.values, option.dest, keywords)


def main():
  usage = 'usage: %prog'
  parser = OptionParser(usage)

  parser.add_option('-d', '--debug', action='store_true', dest='debug',
                    help='Set debug messages')
  parser.add_option('-r', '--read', action='store_true', dest='read',
                    help='Read from the datastore')
  parser.add_option('-w', '--write', action='callback', callback=queries_arg, dest='write',
                    help='Write to the datastore by fetching data from the net i.e. keyword1,keyword2[,...]')
  parser.add_option('-n', '--namespace', action='store', dest='ns',
                    default=False, help='Specify the database namespace')
  parser.add_option('-j', '--json', action="store_const", const='json', dest='json',
                    default=False, help='Parse the datastore as json')

  options, args = parser.parse_args()

  if options.read is None and options.write is None:
    parser.error("Must provide --read or --write operations")

  db_directory = DEFAULT_DB_DIRECTORY

  # Set debug messages
  if options.debug:
    logging.basicConfig(level=logging.DEBUG)
  else:
    logging.basicConfig(level=logging.INFO)

  with BusinessLogic.BusinessLogic(db_directory, options.ns) as logic:
    if options.write:
      logic.write(options.write)
    elif options.read:
      logic.read(output_format=options.json)

if __name__ == '__main__':
  main()

# Main #######################################################################
